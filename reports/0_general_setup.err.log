Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# load maps:
#     "ksat" is the saturated hydraulic conductivity of the soil
#     "thetas" is the volumetric water content of the saturated soil
#     "1" and "2" refer to the soil layer
#     "f" refers to the fraction of soil covered by forests
variables = ['ksat1_f', 'ksat2_f', 'thetas1_f', 'thetas2_f', 'thetas3']
soils = {}
for var in variables:
    ds = xr.open_dataset(path_model / 'maps' / 'soil_hydraulics' / f'{var}.nc')
    ds.close()
    soils[var] = ds['Band1']

# plot maps
ncols = len(variables)
fig, ax = plt.subplots(ncols=ncols, figsize=(5 * ncols, 5))
for i, (var, da) in enumerate(soils.items()):
    da.plot(
        ax=ax[i], 
        cmap='Blues', 
        cbar_kwargs={'label': var, "orientation": "horizontal", "shrink": 0.8, "aspect": 40, "pad": 0.1}
    )
    ax[i].axis('off');
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 9[39m
[32m      7[39m soils = {}
[32m      8[39m [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m variables:
[32m----> [39m[32m9[39m     ds = [43mxr[49m[43m.[49m[43mopen_dataset[49m[43m([49m[43mpath_model[49m[43m [49m[43m/[49m[43m [49m[33;43m'[39;49m[33;43mmaps[39;49m[33;43m'[39;49m[43m [49m[43m/[49m[43m [49m[33;43m'[39;49m[33;43msoil_hydraulics[39;49m[33;43m'[39;49m[43m [49m[43m/[49m[43m [49m[33;43mf[39;49m[33;43m'[39;49m[38;5;132;43;01m{[39;49;00m[43mvar[49m[38;5;132;43;01m}[39;49;00m[33;43m.nc[39;49m[33;43m'[39;49m[43m)[49m
[32m     10[39m     ds.close()
[32m     11[39m     soils[var] = ds[[33m'[39m[33mBand1[39m[33m'[39m]

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/xarray/backends/api.py:668[39m, in [36mopen_dataset[39m[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)[39m
[32m    665[39m     kwargs.update(backend_kwargs)
[32m    667[39m [38;5;28;01mif[39;00m engine [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m668[39m     engine = [43mplugins[49m[43m.[49m[43mguess_engine[49m[43m([49m[43mfilename_or_obj[49m[43m)[49m
[32m    670[39m [38;5;28;01mif[39;00m from_array_kwargs [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    671[39m     from_array_kwargs = {}

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/xarray/backends/plugins.py:194[39m, in [36mguess_engine[39m[34m(store_spec)[39m
[32m    186[39m [38;5;28;01melse[39;00m:
[32m    187[39m     error_msg = (
[32m    188[39m         [33m"[39m[33mfound the following matches with the input file in xarray[39m[33m'[39m[33ms IO [39m[33m"[39m
[32m    189[39m         [33mf[39m[33m"[39m[33mbackends: [39m[38;5;132;01m{[39;00mcompatible_engines[38;5;132;01m}[39;00m[33m. But their dependencies may not be installed, see:[39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    190[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/user-guide/io.html [39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    191[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html[39m[33m"[39m
[32m    192[39m     )
[32m--> [39m[32m194[39m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(error_msg)

[31mValueError[39m: did not find a match in any of xarray's currently installed IO backends ['netcdf4']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:
https://docs.xarray.dev/en/stable/getting-started-guide/installing.html
https://docs.xarray.dev/en/stable/user-guide/io.html

