Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# load average inflow into the lower groundware zone
lzavin = xr.open_dataarray(path_init / 'lzavin.nc')
lzavin.close()

# load average discharge
avgdis = xr.open_dataarray(path_init / 'avgdis.nc')
avgdis.close()

# plot the maps
fig, axes = plt.subplots(ncols=2, figsize=(12, 4.5))
for ax, da in zip(axes, [lzavin, avgdis]):
    da.plot(ax=ax, cmap='Blues', cbar_kwargs={'shrink': 0.8})
    ax.axis('off')
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 2[39m
[32m      1[39m [38;5;66;03m# load average inflow into the lower groundware zone[39;00m
[32m----> [39m[32m2[39m lzavin = [43mxr[49m[43m.[49m[43mopen_dataarray[49m[43m([49m[43mpath_init[49m[43m [49m[43m/[49m[43m [49m[33;43m'[39;49m[33;43mlzavin.nc[39;49m[33;43m'[39;49m[43m)[49m
[32m      3[39m lzavin.close()
[32m      5[39m [38;5;66;03m# load average discharge[39;00m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/xarray/backends/api.py:881[39m, in [36mopen_dataarray[39m[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)[39m
[32m    710[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mopen_dataarray[39m(
[32m    711[39m     filename_or_obj: [38;5;28mstr[39m | os.PathLike[Any] | ReadBuffer | AbstractDataStore,
[32m    712[39m     *,
[32m   (...)[39m[32m    731[39m     **kwargs,
[32m    732[39m ) -> DataArray:
[32m    733[39m [38;5;250m    [39m[33;03m"""Open an DataArray from a file or file-like object containing a single[39;00m
[32m    734[39m [33;03m    data variable.[39;00m
[32m    735[39m 
[32m   (...)[39m[32m    878[39m [33;03m    open_dataset[39;00m
[32m    879[39m [33;03m    """[39;00m
[32m--> [39m[32m881[39m     dataset = [43mopen_dataset[49m[43m([49m
[32m    882[39m [43m        [49m[43mfilename_or_obj[49m[43m,[49m
[32m    883[39m [43m        [49m[43mdecode_cf[49m[43m=[49m[43mdecode_cf[49m[43m,[49m
[32m    884[39m [43m        [49m[43mmask_and_scale[49m[43m=[49m[43mmask_and_scale[49m[43m,[49m
[32m    885[39m [43m        [49m[43mdecode_times[49m[43m=[49m[43mdecode_times[49m[43m,[49m
[32m    886[39m [43m        [49m[43mconcat_characters[49m[43m=[49m[43mconcat_characters[49m[43m,[49m
[32m    887[39m [43m        [49m[43mdecode_coords[49m[43m=[49m[43mdecode_coords[49m[43m,[49m
[32m    888[39m [43m        [49m[43mengine[49m[43m=[49m[43mengine[49m[43m,[49m
[32m    889[39m [43m        [49m[43mchunks[49m[43m=[49m[43mchunks[49m[43m,[49m
[32m    890[39m [43m        [49m[43mcache[49m[43m=[49m[43mcache[49m[43m,[49m
[32m    891[39m [43m        [49m[43mdrop_variables[49m[43m=[49m[43mdrop_variables[49m[43m,[49m
[32m    892[39m [43m        [49m[43minline_array[49m[43m=[49m[43minline_array[49m[43m,[49m
[32m    893[39m [43m        [49m[43mchunked_array_type[49m[43m=[49m[43mchunked_array_type[49m[43m,[49m
[32m    894[39m [43m        [49m[43mfrom_array_kwargs[49m[43m=[49m[43mfrom_array_kwargs[49m[43m,[49m
[32m    895[39m [43m        [49m[43mbackend_kwargs[49m[43m=[49m[43mbackend_kwargs[49m[43m,[49m
[32m    896[39m [43m        [49m[43muse_cftime[49m[43m=[49m[43muse_cftime[49m[43m,[49m
[32m    897[39m [43m        [49m[43mdecode_timedelta[49m[43m=[49m[43mdecode_timedelta[49m[43m,[49m
[32m    898[39m [43m        [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m,[49m
[32m    899[39m [43m    [49m[43m)[49m
[32m    901[39m     [38;5;28;01mif[39;00m [38;5;28mlen[39m(dataset.data_vars) != [32m1[39m:
[32m    902[39m         [38;5;28;01mif[39;00m [38;5;28mlen[39m(dataset.data_vars) == [32m0[39m:

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/xarray/backends/api.py:668[39m, in [36mopen_dataset[39m[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)[39m
[32m    665[39m     kwargs.update(backend_kwargs)
[32m    667[39m [38;5;28;01mif[39;00m engine [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m668[39m     engine = [43mplugins[49m[43m.[49m[43mguess_engine[49m[43m([49m[43mfilename_or_obj[49m[43m)[49m
[32m    670[39m [38;5;28;01mif[39;00m from_array_kwargs [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    671[39m     from_array_kwargs = {}

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/xarray/backends/plugins.py:194[39m, in [36mguess_engine[39m[34m(store_spec)[39m
[32m    186[39m [38;5;28;01melse[39;00m:
[32m    187[39m     error_msg = (
[32m    188[39m         [33m"[39m[33mfound the following matches with the input file in xarray[39m[33m'[39m[33ms IO [39m[33m"[39m
[32m    189[39m         [33mf[39m[33m"[39m[33mbackends: [39m[38;5;132;01m{[39;00mcompatible_engines[38;5;132;01m}[39;00m[33m. But their dependencies may not be installed, see:[39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    190[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/user-guide/io.html [39m[38;5;130;01m\n[39;00m[33m"[39m
[32m    191[39m         [33m"[39m[33mhttps://docs.xarray.dev/en/stable/getting-started-guide/installing.html[39m[33m"[39m
[32m    192[39m     )
[32m--> [39m[32m194[39m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(error_msg)

[31mValueError[39m: did not find a match in any of xarray's currently installed IO backends ['netcdf4']. Consider explicitly selecting one of the installed engines via the ``engine`` parameter, or installing additional IO dependencies, see:
https://docs.xarray.dev/en/stable/getting-started-guide/installing.html
https://docs.xarray.dev/en/stable/user-guide/io.html

